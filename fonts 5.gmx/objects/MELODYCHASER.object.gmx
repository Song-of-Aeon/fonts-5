<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_reseputaa</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//if asdawdasdawd; {} //this code works
mmod = 0;
cmod = 0;
bar = 64;
mini = 1.4;
minibig = (mini-1)*64;
bop[0] = 1;
bop[1] = 1;
bop[2] = 1;
bop[3] = 1;
bop[4] = 1;
bop[5] = 1;
bop[6] = 1;
bop[7] = 1;
bop[8] = 1;
combo = 0;
realscore = 0;
highscore = 0;
draw_set_font(f_ronaldo);
state = c_receptorinput;
offset = 0;
noterank = 5;
ranktext = 11037;
//offset = 1918;
timecounter = 0;
songstarting = false;
if global.songscript = c_lancerraps {
laneleft = 64+minibig;
lanedown = 128+minibig*2;
laneup = 192+minibig*3;
laneright = 256+minibig*4;
} else {
laneleft = 534-minibig*1.5;
lanedown = 598-minibig*.5;
laneup = 662+minibig*.5;
laneright = 726+minibig*1.5;
}
lanespacing = 64;
lanes = 4;
laneselected = lanedown+(lanespacing/2);
lanespeed = 0;
hp = 12;
//measurescoring = array_create(48);
audio = m_drivin; //doesnt matter, songscript contains audio
songbg = s_kaguya;
script_execute(global.songscript);

danmaku = 0;
upwave = 0;
downwave = 0;
danmaku = 0;
windowBouncex = 1;
windowBouncey = 1;
windowBounceSpeed = 0;
windowx = window_get_x();
windowy = window_get_y();
windowxsaved = window_get_x();
windowysaved = window_get_y();
whspd = 0;
wvspd = 0;
inputgimmick = true;
arraypos = 0;
gimmickstate = 0;
breadx = window_get_x();
bready = window_get_y();
comborank = 3;

count = 0;
if global.songscript = c_eonbreak {
    window_set_fullscreen(false);
}
if global.noteoverride != 0 {
    c_noteoverride();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>c_input();

/*if keyboard_check_pressed(ord('R')) {
    instance_destroy(o_smparser);
    instance_destroy(o_note);
    instance_create(0, 0, o_smparser);
}*/
if !instance_exists(o_smparser) {
    if select {
        songstarting = true;
        instance_create(0, 0, o_smparser);
    }
    if up &amp;&amp; mini &lt; 3 {
        mini += .1;
        minibig = (mini-1)*64;
        if global.songscript = c_lancerraps {
            laneleft = 64+minibig;
            lanedown = 128+minibig*2;
            laneup = 192+minibig*3;
            laneright = 256+minibig*4;
        } else {
            laneleft = 534-minibig*1.5;
            lanedown = 598-minibig*.5;
            laneup = 662+minibig*.5;
            laneright = 726+minibig*1.5;
        }

    }
    if down &amp;&amp; mini &gt; .5 {
        mini -= .1;
        minibig = (mini-1)*64;
        if global.songscript = c_lancerraps {
            laneleft = 64+minibig;
            lanedown = 128+minibig*2;
            laneup = 192+minibig*3;
            laneright = 256+minibig*4;
        } else {
            laneleft = 534-minibig*1.5;
            lanedown = 598-minibig*.5;
            laneup = 662+minibig*.5;
            laneright = 726+minibig*1.5;
        }

    }
    

}/* else if instance_exists(o_smparser) {
    timeat += delta_time/1000000;
} else {
    timeat = 0;
}*/
if songstarting {
    timecounter += delta_time;
    if timecounter/1000 &gt;= offset {
        count++;
        if count = 10 {
            instance_create(800, 500, o_zero);
        }
        if (count &gt;= 295 &amp;&amp; global.songscript = c_eonbreak) || (count &gt;= 290 &amp;&amp; global.songscript != c_eonbreak){
        
        //if (count &gt;= 235 &amp;&amp; global.songscript = c_eonbreak) || (count &gt;= 230 &amp;&amp; global.songscript != c_eonbreak){
            audio_play_sound(audio, 0, false);
            
            songstarting = false;
        }
    }
    
}




/*if keyboard_check_pressed(vk_subtract) {
    xmod -= .05;
}
if keyboard_check_pressed(vk_add) {
    xmod += .05;
}*/

script_execute(state);

var i;
for (i=0; i&lt;8; i++) {
    bop[i] += .05;
    bop[i] = clamp(bop[i], 0, 1);
}
bop[8] -= .05;
bop[8] = clamp(bop[i], 1, 2);

var j;
lanespacing = laneup - laneleft;
for (j=laneleft; j&lt;=laneup; j+=lanespacing/2) {
    //var note = instance_place(j, bar-bpm*global.xmod/20-128, o_note); CUCK MODE NOTE CHECKING LOL
    var note = collision_line(j, bar-bpm*global.xmod/20-128, j, bar+bpm*global.xmod/20-128, o_note, false, false);
    if note != noone {
        if note.object_index = o_freeze || note.object_index = o_roll {
            with note.tail {
                unusable = true;
                head = 0;
            }   
        } else if note.object_index != o_mine {
            combo = 0;
            bop[8] = 1.3;
            noterank = 4;
            hp -= 1;
        }
        if instance_exists(o_textbox) {
            o_textbox.durability--;
        }
        instance_destroy(note);
        
    }
    /*if instance_exists(instance_place(j, bar, o_tail)) {
        if instance_place(j, bar, o_tail).y &lt;= bar-64 || instance_place(j, bar, o_tail).y &lt;= instance_place(j, bar, o_tail).head.y+32 {
            with head {
                instance_destroy();
            }
        }
        instance_destroy();
        
    }*/
}

if lanes = 8 {
    switch state {
        case c_receptorinput:
            if keyboard_check_pressed(vk_space) {
                state = c_receptorinputwo;
                lanespeed = 32;
            }
            if laneselected &gt; 159 {
                laneselected += lanespeed;
                lanespeed = lanespeed/1.09;
            }
            break;
        case c_receptorinputwo:
            if keyboard_check_pressed(vk_space) {
                state = c_receptorinput;
                lanespeed = -32;
            }
            if laneselected &lt; 543 {
                laneselected += lanespeed;
                lanespeed = lanespeed/1.09;
            }
            break;
    }
}





/*if(keyboard_check(vk_f1)){
    instance_create(0,0,o_ChromaticAbberation);
}*/

if hp &gt; 12 {
    hp = 12;
}

if (back &amp;&amp; !instance_exists(o_fao)) || (hp &lt;= 0 &amp;&amp; global.songscript != c_eonbreak) {
    if global.storymode = true &amp;&amp; hp &gt; 0 {
        with instance_create(0, 0, o_fao) {
            leaving = cutscene;
            depth = -3;
        }
        var scoring6 = real(global.scoring[6]);
        scoring6 += MELODYCHASER.realscore/5;
        if real(global.scoring[global.currentstage]) &lt; MELODYCHASER.realscore {
            global.scoring[global.currentstage] = string(MELODYCHASER.realscore);
            if string_length(global.scoring[global.currentstage] &lt; 4) {
                if string_char_at(global.scoring[global.currentstage], 2) = "." {
                    global.scoring[global.currentstage] = "0" + global.scoring[global.currentstage];
                } else {
                    global.scoring[global.currentstage] = global.scoring[global.currentstage] + "0";
                }
            }
            switch comborank {
                case 1:
                    global.scoring[global.currentstage] = string(global.scoring[global.currentstage] + "G");
                    break;
                case 2:
                    global.scoring[global.currentstage] = string(global.scoring[global.currentstage] + "P");
                    break;
                case 3:
                    global.scoring[global.currentstage] = "100.0M";
                    break;
                
            }
        }
        global.cutscenecount++;
    } else {
        with instance_create(0, 0, o_fao) {
            leaving = stagemenu;
        }
        if real(global.scoring[global.currentstage]) &lt; MELODYCHASER.realscore {
            global.scoring[global.currentstage] = string(MELODYCHASER.realscore);
            if string_length(global.scoring[global.currentstage] &lt; 4) {
                if string_char_at(global.scoring[global.currentstage], 2) = "." {
                    global.scoring[global.currentstage] = "0" + global.scoring[global.currentstage];
                } else {
                    global.scoring[global.currentstage] = global.scoring[global.currentstage] + "0";
                }
            }
            switch comborank {
                case 1:
                    global.scoring[global.currentstage] = string(global.scoring[global.currentstage] + "G");
                    break;
                case 2:
                    global.scoring[global.currentstage] = string(global.scoring[global.currentstage] + "P");
                    break;
                case 3:
                    global.scoring[global.currentstage] = "100.0M";
                    break;
                
            }
        }
    }
    
    audio_stop_sound(audio);
}

//if global.songscript = c_eonbreak {
    if inputgimmick = false {
        if arrayx[arraypos] = "C" {
            with instance_create(0, 0, o_ChromaticAbberation) {
                intensity = other.arrayy[other.arraypos];
            }
        } else if arrayx[arraypos] = "S" { //state
            gimmickstate = arrayy[arraypos];
            //absolute, velocity, reverse, or save
        } else if arrayx[arraypos] = "B" {
            windowBounceSpeed += arrayy[arraypos];
            gimmickstate = 0;
        } else if arrayx[arraypos] = "D" {
            instance_create(640, 360, o_doctor);
        } else if arrayx[arraypos] = "T"  {
            if global.storymode = true {
                instance_create(630, bar+100, o_textbox);
            }
        } else {
            switch gimmickstate {
                case 0:
                    window_set_position(arrayx[arraypos], windowy);
                    whspd = 0;
                    wvspd = 0;
                    break;
                case 1:
                    whspd = arrayx[arraypos];
                    wvspd = arrayy[arraypos];
                    break;
                case 2:
                    whspd = arrayx[arraypos];
                    wvspd = arrayy[arraypos];
                    break;
                case 3:
                    windowx = window_get_x();
                    windowy = window_get_y();
                    break;
            }
        }
        inputgimmick = true;
        arraypos++;
    }
    if gimmickstate = 2 {
        windowx = windowxsaved;
        windowy = windowysaved;
        
    }
    windowx += whspd;
    windowy += wvspd;
    whspd = whspd/1.025;
    wvspd = wvspd/1.025;
    
    if(keyboard_check(vk_subtract)){
    windowBounceSpeed--;
    }
    if(keyboard_check(vk_add)){
        windowBounceSpeed++;
    }
    if(display_get_width() &lt;= breadx+window_get_width()){
        windowBouncex = -1;
    }
    if(breadx &lt;= 0){
        windowBouncex = 1;
    }
    if(display_get_height() &lt;= bready+window_get_height()){
        windowBouncey = -1;
    }
    if(bready &lt;= 0){
        windowBouncey = 1;
    }
    breadx = window_get_x();
    bready = window_get_y();
    
    if windowBounceSpeed = 0 {
        window_set_position(windowx, windowy);
    } else {
        window_set_position(breadx+(windowBounceSpeed*windowBouncex),bready+(windowBounceSpeed*windowBouncey));
    }
    inputgimmick = true;
//}
if global.gimmickactive = false {
    MELODYCHASER.lanes = 4;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>depth = 5;
draw_sprite(songbg, 0, 0, 0);
draw_sprite_ext(s_blueselected, 0, laneselected+12.8, 0, mini, 1, 0, c_white, 1);
draw_set_font(f_scoreronaldo);

draw_sprite_ext(global.receptor, 0, laneleft, bar, mini*bop[0], mini*bop[0], -90, c_white, 1);
draw_sprite_ext(global.receptor, 0, lanedown, bar, mini*bop[1], mini*bop[1], 0, c_white, 1);
draw_sprite_ext(global.receptor, 0, laneup, bar, mini*bop[2], mini*bop[2], 180, c_white, 1);
draw_sprite_ext(global.receptor, 0, laneright, bar, mini*bop[3], mini*bop[3], 90, c_white, 1);
if lanes = 8 {
    draw_sprite_ext(global.receptor, 0, laneleft+lanespacing*3, bar, mini*bop[4], mini*bop[4], -90, c_white, 1);
    draw_sprite_ext(global.receptor, 0, lanedown+lanespacing*3, bar, mini*bop[5], mini*bop[5], 0, c_white, 1);
    draw_sprite_ext(global.receptor, 0, laneup+lanespacing*3, bar, mini*bop[6], mini*bop[6], 180, c_white, 1);
    draw_sprite_ext(global.receptor, 0, laneright+lanespacing*3, bar, mini*bop[7], mini*bop[7], 90, c_white, 1);
}




//draw_text(laneright+250, bar+100, string(realscore));
//draw_text(laneright+250, bar+300, string(combo));
draw_set_halign(fa_center);
draw_set_colour(c_white);
draw_set_font(f_combo);
depth = -3;
draw_text(lanedown+lanespacing/4, bar+300, string(combo));
//draw_text(lanedown+lanespacing/4, bar+400, string(comborank));
//draw_text(lanedown+lanespacing/4, bar+200, string(ranktext));
draw_sprite_ext(s_judgement, noterank+3, lanedown+lanespacing/4, bar+250, bop[8], bop[8], noterank, c_white, 1);
depth = 5;
draw_set_font(f_scoreronaldo);
draw_set_colour(c_black);
draw_set_halign(fa_left);

var l;
for (l=0; l&lt;floor(hp); l++) {
    draw_sprite(s_heart, 0, laneright+80*mini, bar+l*16);
}
/*var m;
for (m=0;)
draw_sprite
*/
//draw_text(900, 700, string(timeat));

if count &lt; 230 {
    draw_sprite(s_prep, floor(count/60), 665, 360);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
