<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_reseputaa</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//if asdawdasdawd; {} //this code works
mmod = 0;
cmod = 0;
bar = 64;
mini = 1; //1.4
minibig = (mini-1)*64;
bop[0] = 1;
bop[1] = 1;
bop[2] = 1;
bop[3] = 1;
bop[4] = 1;
bop[5] = 1;
bop[6] = 1;
bop[7] = 1;
bop[8] = 1;
infoalpha = 0;
combocolour = array_create(4);
combo = 0;
realscore = 0;
highscore = 0;
draw_set_font(f_ronaldo);
state = c_receptorinput;
offset = 0;
noterank = 5;
ranktext = 11037;
//offset = 1918;
timecounter = 0;
songstarting = false;
if global.songscript = c_lancerraps {
laneleft = 394-96-minibig*1.5;
lanedown = 394-32-minibig*.5;
laneup = 394+32+minibig*.5;
laneright = 394+96+minibig*1.5;
laneleftwo = 884-96-minibig*1.5;
lanedowntwo = 884-32-minibig*.5;
laneuptwo = 884+32+minibig*.5;
lanerightwo = 884+96+minibig*1.5;
bluepos = 394;
} else {
laneleft = 544-minibig*1.5;
lanedown = 608-minibig*.5;
laneup = 672+minibig*.5;
laneright = 736+minibig*1.5;
bluepos = 640;
}
lanespacing = 64;
lanes = 4;
laneselected = lanedown+(lanespacing/2);

blueposaved = bluepos;
bluehspd = 0;
lanespeed = 0;
hp = 12;
//measurescoring = array_create(48);
audio = m_drivin; //doesnt matter, songscript contains audio
songbg = s_kaguya;
script_execute(global.songscript);

danmaku = 0;
upwave = 0;
downwave = 0;
danmaku = 0;
windowBouncex = 1;
windowBouncey = 1;
windowBounceSpeed = 0;
windowx = global.ogx;
windowy = global.ogy;
windowxsaved = global.ogx;
windowysaved = global.ogy;
whspd = 0;
wvspd = 0;
inputgimmick = true;
arraypos = 0;
gimmickstate = 0;
breadx = global.ogx;
bready = global.ogy;
comborank = 3;
allideal = false;
noteturn = false;
noteburst = false;
osumode = false;
chokepoint = 2000;
notechange = false;

count = 0;
countwo = 0;
if global.songscript = c_eonbreak &amp;&amp; window_get_fullscreen() {
    window_set_fullscreen(false);
    window_set_position(global.ogx, global.ogy);
    console_log(window_get_x());
}
if global.noteoverride != 0 {
    c_noteoverride();
}
global.truetime = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>c_input();
if alt &amp;&amp; select &amp;&amp; global.songscript != c_eonbreak {
    if window_get_fullscreen() {
        window_set_fullscreen(false);
        window_set_position(global.ogx, global.ogy);
    } else {
        window_set_fullscreen(true);
    }
    select = false;
}

/*if keyboard_check_pressed(ord('R')) {
    instance_destroy(o_smparser);
    instance_destroy(o_note);
    instance_create(0, 0, o_smparser);
}*/
if !instance_exists(o_smparser) {
    if select {
        songstarting = true;
        window_set_cursor_sprite(s_null, 0);
        with o_help {
            savedy = room_height + sprite_height/2 + 5;
            vspd = y-savedy;
            console_log(savedy);
            console_log(vspd);
            going = true;
        }
        instance_create(0, 0, o_smparser);
    }
    if up &amp;&amp; mini &lt; 3 {
        mini += .1;
        minibig = (mini-1)*64;
        if global.songscript = c_lancerraps {
            laneleft = 394-96-minibig*1.5;
            lanedown = 394-32-minibig*.5;
            laneup = 394+32+minibig*.5;
            laneright = 394+96+minibig*1.5;
            laneleftwo = 884-96-minibig*1.5;
            lanedowntwo = 884-32-minibig*.5;
            laneuptwo = 884+32+minibig*.5;
            lanerightwo = 884+96+minibig*1.5;
        } else {
            laneleft = 544-minibig*1.5;
            lanedown = 608-minibig*.5;
            laneup = 672+minibig*.5;
            laneright = 736+minibig*1.5;
        }

    }
    if down &amp;&amp; mini &gt; .5 {
        mini -= .1;
        minibig = (mini-1)*64;
        if global.songscript = c_lancerraps {
            laneleft = 394-96-minibig*1.5;
            lanedown = 394-32-minibig*.5;
            laneup = 394+32+minibig*.5;
            laneright = 394+96+minibig*1.5;
            laneleftwo = 884-96-minibig*1.5;
            lanedowntwo = 884-32-minibig*.5;
            laneuptwo = 884+32+minibig*.5;
            lanerightwo = 884+96+minibig*1.5;
        } else {
            laneleft = 544-minibig*1.5;
            lanedown = 608-minibig*.5;
            laneup = 672+minibig*.5;
            laneright = 736+minibig*1.5;
        }

    }
    

}/* else if instance_exists(o_smparser) {
    timeat += delta_time/1000000;
} else {
    timeat = 0;
}*/
if songstarting {
    timecounter += delta_time;
    if timecounter/1000 &gt;= offset {
        count++;
        if count = 10 {
            instance_create(800, 500, o_zero);
        }
        if (count &gt;= 295 &amp;&amp; global.songscript = c_eonbreak) || (count &gt;= 290 &amp;&amp; global.songscript != c_eonbreak){
        
        //if (count &gt;= 235 &amp;&amp; global.songscript = c_eonbreak) || (count &gt;= 230 &amp;&amp; global.songscript != c_eonbreak){
            audio_play_sound(audio, 0, false);
            songstarting = false;
            instance_create(640, bar+100, o_subbox);
        }
    }
    
}




/*if keyboard_check_pressed(vk_subtract) {
    xmod -= .05;
}
if keyboard_check_pressed(vk_add) {
    xmod += .05;
}*/

script_execute(state);

var i;
for (i=0; i&lt;8; i++) {
    bop[i] += .05;
    bop[i] = clamp(bop[i], 0, 1);
}
bop[8] -= .05;
bop[8] = clamp(bop[i], 1, 2);

var j;
lanespacing = laneup - laneleft;
//for (j=laneleft; j&lt;=laneup; j+=lanespacing/2) {
    //var note = instance_place(j, bar-bpm*global.xmod/20-128, o_note); CUCK MODE NOTE CHECKING LOL
    var note = collision_line(laneleft, bar-bpm*global.xmod/20-128, laneright, bar-bpm*global.xmod/20-128, o_note, false, false);
    if note != noone {
        if note.object_index = o_freeze || note.object_index = o_roll {
            with note.tail {
                unusable = true;
                head = 0;
            }
            combo = 0;
            bop[8] = 1.3;
            noterank = 4;
            hp -= 1;
            infoalpha += .2;
            infoalpha = clamp(infoalpha, 1.6, 4);
            combocolour[3] = combocolour[2];
            combocolour[2] = combocolour[1];
            combocolour[1] = combocolour[0];
            combocolour[0] = c_red;
        } else if note.object_index != o_mine {
            combo = 0;
            bop[8] = 1.3;
            noterank = 4;
            hp -= 1;
            infoalpha += .2;
            infoalpha = clamp(infoalpha, 1.6, 4);
            combocolour[3] = combocolour[2];
            combocolour[2] = combocolour[1];
            combocolour[1] = combocolour[0];
            combocolour[0] = c_red;
        }
        if instance_exists(o_textbox) {
            o_textbox.durability--;
        }
        instance_destroy(note);
        
    }
    /*if instance_exists(instance_place(j, bar, o_tail)) {
        if instance_place(j, bar, o_tail).y &lt;= bar-64 || instance_place(j, bar, o_tail).y &lt;= instance_place(j, bar, o_tail).head.y+32 {
            with head {
                instance_destroy();
            }
        }
        instance_destroy();
        
    }
}*/

/*if lanes = 8 {
    switch state {
        case c_receptorinput:
            if swap {
                state = c_receptorinputwo;
                lanespeed = 32;
            }
            if laneselected &gt; 159 {
                laneselected += lanespeed;
                lanespeed = lanespeed/1.09;
            }
            break;
        case c_receptorinputwo:
            if swap {
                state = c_receptorinput;
                lanespeed = -32;
            }
            if laneselected &lt; 543 {
                laneselected += lanespeed;
                lanespeed = lanespeed/1.09;
            }
            break;
    }
}*/





/*if(keyboard_check(vk_f1)){
    instance_create(0,0,o_ChromaticAbberation);
}*/

if hp &gt; 12 {
    hp = 12;
}

infoalpha -= .03;
infoalpha = clamp(infoalpha, 0, 4);

if !instance_exists(o_note) &amp;&amp; instance_exists(o_smparser) {
    countwo++;
}

if (back &amp;&amp; !instance_exists(o_fao)) || (hp &lt;= 0 &amp;&amp; global.songscript != c_everythingwillfreeze) || countwo = 300 {
    if global.storymode = true &amp;&amp; hp &gt; 0  { //&amp;&amp; !audio_is_playing(song) || !back
        with instance_create(0, 0, o_fao) {
            leaving = cutscene;
            depth = -3;
        }
        var scoring6 = real(global.scoring[6]);
        if global.songscript != c_nocturne &amp;&amp; global.songscript != c_itsrainingsomewhereelse {
            scoring6 += MELODYCHASER.realscore/5;
        }
        if real(global.scoring[global.currentstage]) &lt; MELODYCHASER.realscore {
            global.scoring[global.currentstage] = string(MELODYCHASER.realscore);
            if string_length(global.scoring[global.currentstage] &lt; 4) {
                if string_char_at(global.scoring[global.currentstage], 2) = "." {
                    global.scoring[global.currentstage] = "0" + global.scoring[global.currentstage];
                } else {
                    global.scoring[global.currentstage] = global.scoring[global.currentstage] + "0";
                }
            }
            switch comborank {
                case 1:
                    global.scoring[global.currentstage] = string(global.scoring[global.currentstage] + "G");
                    break;
                case 2:
                    global.scoring[global.currentstage] = string(global.scoring[global.currentstage] + "P");
                    break;
                case 3:
                    global.scoring[global.currentstage] = "100.0M";
                    break;
                
            }
        }
        //if real(global.scoring[0]) &lt; scoring6 {
            global.scoring[6] = string(scoring6);
            /*if string_length(global.scoring[0] &lt; 4) {
                if string_char_at(global.scoring[0], 2) = "." {
                    global.scoring[0] = "0" + global.scoring[0];
                } else {
                    global.scoring[0] = global.scoring[0] + "0";
                }
            }
            switch o_menu.truecombo {
                case 1:
                    global.scoring[0] = string(global.scoring[0] + "G");
                    break;
                case 2:
                    global.scoring[0] = string(global.scoring[0] + "P");
                    break;
                case 3:
                    global.scoring[0] = string(global.scoring[0] + "M");
                    break;
                
            }*/
        //}
        //if global.songscript != c_nocturne {
            global.cutscenecount++;
        //}
    } else {
        if hp &lt;= 0 {
            comborank = 99;
        }
        with instance_create(0, 0, o_fao) {
            leaving = stagemenu;
        }
        if real(global.scoring[global.currentstage]) &lt; MELODYCHASER.realscore {
            global.scoring[global.currentstage] = string(MELODYCHASER.realscore);
            if string_length(global.scoring[global.currentstage] &lt; 4) {
                if string_char_at(global.scoring[global.currentstage], 2) = "." {
                    global.scoring[global.currentstage] = "0" + global.scoring[global.currentstage];
                } else {
                    global.scoring[global.currentstage] = global.scoring[global.currentstage] + "0";
                }
            }
            switch comborank {
                case 1:
                    global.scoring[global.currentstage] = string(global.scoring[global.currentstage] + "G");
                    break;
                case 2:
                    global.scoring[global.currentstage] = string(global.scoring[global.currentstage] + "P");
                    break;
                case 3:
                    global.scoring[global.currentstage] = "100.0M";
                    break;
                    
                case 99:
                    global.scoring[global.currentstage] = string(global.scoring[global.currentstage] + "L");
                    break;
            }
        }
    }
    if instance_exists(o_ChromaticAbberation) { //get rid of this for chance to mega glitch
        with o_ChromaticAbberation {
            intensity = 0;
        }
        application_surface_draw_enable(true);
    }
    audio_stop_sound(audio);
}

switch global.songscript {
    case c_everythingwillfreeze:
        c_everythingwillfreeze_gimmicks();
        break;
    case c_reset_set:
        c_reset_set_gimmicks();
        break;
    case c_eonbreak:
        c_eonbreak_gimmicks();
        break;
    
    default:
        if inputgimmick = false {
            if arrayx[arraypos] = "T"  {
                if global.storymode = true {
                    instance_create(640, bar+100, o_textbox);
                }
            }
            inputgimmick = true;
        }
        break;
}

/*if inputgimmick = false {
    if arrayx[arraypos] = "T"  {
        if global.storymode = true {
            instance_create(630, bar+100, o_textbox);
        }
    }
}*/

if lanes &gt; 4 {
    if swap {
        switch state {
            case c_receptorinput:
                    state = c_receptorinputwo;
                    blueposaved = 884;
                    bluehspd = 490;
                break;
            case c_receptorinputwo:
                    state = c_receptorinput;
                    blueposaved = 394;
                    bluehspd = -490;
                break;
        }
    }
    bluepos = blueposaved;
    bluehspd = bluehspd/2;
    bluepos -= bluehspd;
}

if global.gimmickactive = false {
    MELODYCHASER.lanes = 4;
}

global.truetime = c_timebuster();

//console_log(window_get_x());
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>depth = 5;
draw_sprite(songbg, 0, 0, 0);
//draw_sprite_ext(s_blueselected, 0, laneselected+12.8, 0, mini, 1, 0, c_white, 1);
draw_sprite_ext(s_futureselected, 0, bluepos, 0, mini, 1, 0, c_white, 1);
draw_set_font(f_scoreronaldo);

draw_sprite_ext(global.receptor, 0, laneleft, bar, mini*bop[0], mini*bop[0], -90, c_white, 1);
draw_sprite_ext(global.receptor, 0, lanedown, bar, mini*bop[1], mini*bop[1], 0, c_white, 1);
draw_sprite_ext(global.receptor, 0, laneup, bar, mini*bop[2], mini*bop[2], 180, c_white, 1);
draw_sprite_ext(global.receptor, 0, laneright, bar, mini*bop[3], mini*bop[3], 90, c_white, 1);

draw_set_halign(fa_center);
draw_set_colour(c_white);
draw_set_font(f_combo);

if lanes = 8 {
    draw_sprite_ext(global.receptor, 0, laneleftwo, bar, mini*bop[4], mini*bop[4], -90, c_white, 1);
    draw_sprite_ext(global.receptor, 0, lanedowntwo, bar, mini*bop[5], mini*bop[5], 0, c_white, 1);
    draw_sprite_ext(global.receptor, 0, laneuptwo, bar, mini*bop[6], mini*bop[6], 180, c_white, 1);
    draw_sprite_ext(global.receptor, 0, lanerightwo, bar, mini*bop[7], mini*bop[7], 90, c_white, 1);
    var l;
    for (l=0; l&lt;floor(hp); l++) {
        draw_sprite(s_heart, floor(hp/12), 640, bar+l*16);
    }
    depth = -3;
    draw_text_transformed_colour(blueposaved, bar+230, string(combo), floor(combo/100)/4+.5, floor(combo/100)/4+.5, 0, combocolour[0], combocolour[1], combocolour[2], combocolour[3], infoalpha);
    draw_sprite_ext(s_judgement, noterank+3, blueposaved, bar+150, bop[8], bop[8], noterank, c_white, infoalpha);
    depth = 5;
} else {
    var l;
    for (l=0; l&lt;floor(hp); l++) {
        draw_sprite(s_heart, floor(hp/12), laneright+80*mini, bar+l*16);
    }
    depth = -3;
    draw_text_transformed_colour(blueposaved, bar+230, string(combo), floor(combo/100)/4+.5, floor(combo/100)/4+.5, 0, combocolour[0], combocolour[1], combocolour[2], combocolour[3], infoalpha);
    //draw_text(lanedown+lanespacing/4, bar+400, string(comborank));
    //draw_text(lanedown+lanespacing/4, bar+200, string(ranktext));
    draw_sprite_ext(s_judgement, noterank+3, blueposaved, bar+150, bop[8], bop[8], noterank, c_white, infoalpha);
    depth = 5;
}

//draw_text(100, 100, string(delta_time));




//draw_text(laneright+250, bar+100, string(realscore));
//draw_text(laneright+250, bar+300, string(combo));


draw_set_font(f_scoreronaldo);
draw_set_colour(c_black);
draw_set_halign(fa_left);


draw_line_width(0, chokepoint, window_get_width(), chokepoint, 5);
/*var m;
for (m=0;)
draw_sprite
*/
//draw_text(900, 700, string(timeat));

if count &lt; 230 {
    draw_sprite(s_prep, floor(count/60), 675, 360);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
