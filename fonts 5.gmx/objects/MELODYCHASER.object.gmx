<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_reseputaa</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>xmod = 6;
mmod = 0;
cmod = 0;
bar = 200;
bop[0] = 1;
bop[1] = 1;
bop[2] = 1;
bop[3] = 1;
bop[4] = 1;
bop[5] = 1;
bop[6] = 1;
bop[7] = 1;
combo = 0;
realscore = 0;
highscore = 0;
draw_set_font(f_ronaldo);
state = c_receptorinput;
offset = 0;
//offset = 1918;
timecounter = 0;
songstarting = false;
global.red = s_red;
global.blue = s_blue;
global.purple = s_purple;
global.freeze = s_green;
global.effect = s_effect;
global.mine = s_mine;
global.receptor = s_receptor;
laneleft = 64;
lanedown = 128;
laneup = 192;
laneright = 256;
lanespacing = 64;
lanes = 4;
audio = m_drivin; //doesnt matter, songscript contains audio
songscript = c_lancerraps;
script_execute(songscript);

danmaku = 0;
windowBouncex = 1;
windowBouncey = 1;
windowBounceSpeed = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>c_input();

if keyboard_check_pressed(ord('R')) {
    instance_destroy(o_smparser);
    instance_destroy(o_note);
    instance_create(0, 0, o_smparser);
}
if keyboard_check_pressed(vk_enter) &amp;&amp; !instance_exists(o_smparser) {
    songstarting = true;
    instance_create(0, 0, o_smparser);
}/* else if instance_exists(o_smparser) {
    timeat += delta_time/1000000;
} else {
    timeat = 0;
}*/
if songstarting {
    timecounter += delta_time;
    if timecounter/1000 &gt;= offset {
        audio_play_sound(audio, 0, false);
        
        songstarting = false;
    }
    
}


if keyboard_check_pressed(vk_subtract) {
    xmod -= .05;
}
if keyboard_check_pressed(vk_add) {
    xmod += .05;
}

script_execute(state);

var i;
for (i=0; i&lt;8; i++) {
    bop[i] += .05;
    bop[i] = clamp(bop[i], 0, 1);
}

var j;
lanespacing = laneup - laneleft;
for (j=laneleft; j&lt;=laneup; j+=lanespacing) {
    var note = instance_place(j, bar-128, o_note);
    if note != noone {
        if note.object_index = o_freeze || note.object_index = o_roll {
            with note.tail {
                unusable = true;
                head = 0;
            }
            instance_destroy(note);
            
        } else {
            instance_destroy(note);
        }
        combo = 0;
    }
    /*if instance_exists(instance_place(j, bar, o_tail)) {
        if instance_place(j, bar, o_tail).y &lt;= bar-64 || instance_place(j, bar, o_tail).y &lt;= instance_place(j, bar, o_tail).head.y+32 {
            with head {
                instance_destroy();
            }
        }
        instance_destroy();
        
    }*/
}

if lanes = 8 {
    switch state {
        case c_receptorinput:
            if keyboard_check_pressed(vk_space) {
                state = c_receptorinputwo;
            }
            break;
        case c_receptorinputwo:
            if keyboard_check_pressed(vk_space) {
                state = c_receptorinput;
            }
            break;
    }
}
var windowx = window_get_x();
var windowy = window_get_y();
if(keyboard_check(vk_subtract)){
    windowBounceSpeed--;
}
if(keyboard_check(vk_add)){
    windowBounceSpeed++;
}
if(display_get_width() &lt;= windowx+window_get_width()){
    windowBouncex = -1;
}
if(windowx &lt;= 0){
    windowBouncex = 1;
}
if(display_get_height() &lt;= windowy+window_get_height()){
    windowBouncey = -1;
}
if(windowy &lt;= 0){
    windowBouncey = 1;
}
window_set_position(windowx+(windowBounceSpeed*windowBouncex),windowy+(windowBounceSpeed*windowBouncey));



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite_ext(global.receptor, 0, laneleft, bar, bop[0], bop[0], -90, c_white, 1);
draw_sprite_ext(global.receptor, 0, lanedown, bar, bop[1], bop[1], 0, c_white, 1);
draw_sprite_ext(global.receptor, 0, laneup, bar, bop[2], bop[2], 180, c_white, 1);
draw_sprite_ext(global.receptor, 0, laneright, bar, bop[3], bop[3], 90, c_white, 1);
if lanes = 8 {
    draw_sprite_ext(global.receptor, 0, laneleft+lanespacing*6, bar, bop[4], bop[4], -90, c_white, 1);
    draw_sprite_ext(global.receptor, 0, lanedown+lanespacing*6, bar, bop[5], bop[5], 0, c_white, 1);
    draw_sprite_ext(global.receptor, 0, laneup+lanespacing*6, bar, bop[6], bop[6], 180, c_white, 1);
    draw_sprite_ext(global.receptor, 0, laneright+lanespacing*6, bar, bop[7], bop[7], 90, c_white, 1);
}

draw_text(laneright+250, 500, string(realscore));
draw_text(laneright+250, 700, string(combo));

//draw_text(900, 700, string(timeat));
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
