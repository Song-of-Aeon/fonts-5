<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-4</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>leaving = rhythm_limbo;
drawdark = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>drawdark += .05;

if drawdark &gt;= 1.2 {
    window_set_cursor_sprite(cr_defrag, 0);
    if !window_get_fullscreen() &amp;&amp; global.songscript = c_eonbreak &amp;&amp; global.gimmickactive {
        windowx = global.ogx;
        windowy = global.ogy;
    }
    shader_reset();
    application_surface_draw_enable(true);
    room_goto(leaving);
    if leaving = stagemenu {
        ini_open("profile.ini");
        if global.storymode = true &amp;&amp; real(global.scoring[0]) &lt;= real(global.scoring[6]) { //this is from melodychaser
            if string_length(global.scoring[6] &lt; 4) {
                if string_char_at(global.scoring[6], 2) = "." {
                    global.scoring[6] = "0" + global.scoring[6];
                } else {
                    global.scoring[6] = global.scoring[6] + "0";
                }
            }
            switch o_menu.truecombo {
                case 1:
                    global.scoring[6] = string(global.scoring[6] + "G");
                    break;
                case 2:
                    global.scoring[6] = string(global.scoring[6] + "P");
                    break;
                case 3:
                    global.scoring[6] = string(global.scoring[6] + "M");
                    break;
                
            }
            console_log(script_get_name(global.songscript));
            global.scoring[0] = global.scoring[6];
            if global.songscript = c_eonbreak &amp;&amp; global.songscript = c_key {
                global.completion = ini_write_string("story", "completion", string(global.difficulty+1));
                if global.gimmickactive {
                    global.gimmickcompletion = ini_write_string("story", "gimmick", string(global.difficulty+1));
                }
            }
        }
        //game_save("profile.dat");
        var i;
        for (i=0; i&lt;6; i++) {
            ini_write_string("scores"+string(global.difficulty), "stage " + string(i), global.scoring[i]);
        }
        ini_close();
        o_cutscene.active = false;
        global.storymode = false;
        global.cutscenecount = 0;
        audio_play_sound(m_night, 0, false);
    } else if leaving = cutscene {
        o_cutscene.active = true;
    } else if leaving = rhythm_limbo {
        o_cutscene.active = false;
    }
    if keyboard_check_pressed(vk_control) {
        console_log(instance_number(o_fao));
        console_log(instance_count);
        console_log(drawdark);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite_ext(s_bigdark, 0, 0, 0, 1, 1, 0, c_white, drawdark);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
