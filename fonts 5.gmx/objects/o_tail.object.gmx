<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_midori</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>hspd = 0;
vspd = 0;
dir = 0;
image_speed = 0;
image_index = 2;
image_xscale = global.mini;
image_yscale = global.mini;
head = 0;
colour = c_white;
unusable = false;
count = 0;
alarm[0] = 2+irandom(5);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*if head.object_index = o_roll {
    sprite_index = global.roll;
} else {
    sprite_index = global.freeze;
}*/
sprite_index = head.sprite_index;
//console_log(object_get_name(head));
/*if y &lt; 720 + sprite_height/2 {
    x += hspd*global.truetime;
}*/
//alarm[0] = 5;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !instance_exists(head) {
    instance_destroy();
}



count += global.truetime;
if count &gt;= 240 {
    y += vspd*global.truetime;
}

if y &lt; 720 + sprite_height/2 {
    x += hspd*global.truetime;
    /*if head.object_index = o_roll {
        image_blend = c_purple;
        colour = c_purple;
    }*/
}

if unusable = false {
    image_alpha = head.image_alpha;
    if y &lt;= MELODYCHASER.bar-64 || y &lt;= head.y+32 {
        with head {
            instance_destroy();
        }
        MELODYCHASER.realscore += .2*(100/MELODYCHASER.notecount);
        instance_destroy();
    }
} else if y &lt;= 0 {
    instance_destroy();
}
image_index = 2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if head != 0 || unusable = false {
    //var i;
    //for (i=0; i&lt;distance_to_point(head.x, head.y); i+=64) {
        draw_sprite_ext(sprite_index, 1, x, y-distance_to_point(head.x, head.y)/2-32-(MELODYCHASER.minibig/2), global.mini, distance_to_point(head.x, head.y)/64, 0, colour, image_alpha);
    //}
    
    
} else {
    draw_sprite_ext(sprite_index, 1, x, y-distance_to_point(x, 0)/2-32, global.mini, distance_to_point(x, 0)/64, 0, colour, 1);
}
draw_self();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
