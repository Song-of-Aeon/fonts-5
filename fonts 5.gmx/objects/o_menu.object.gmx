<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_menu</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>menuposition = 0;
selectoronsong = true;
selectorposx = 652;
selectorposy = 127;
difcursy = 49; //125
difcursavedy = 49;
difcurvspd = 0;
selectorvspd = 0;
selectorsavevspd = 0;
selectorsavey = selectorposy;
hspd = 0;
menuxscale = 1;
menuyscale = 1;
lockon = 0;

global.scoring[0] = 0;
global.scoring[1] = "00.00L";
global.scoring[2] = "00.00L";
global.scoring[3] = "00.00L";
global.scoring[4] = "00.00L";
global.scoring[5] = "00.00L";
global.scoring[6] = "00.00L";
global.currentstage = 6;
scoreshow = array_create(6);
scoreshowcolour = array(c_white, c_white, c_white, c_white, c_white, c_white);

global.songscript = c_jumptest;
global.storymode = false;
global.cutscenecount = 0;
global.megastream = false;
truecombo = 0;

global.red = s_red;
global.blue = s_blue;
global.purple = s_purple;
global.freeze = s_green;
global.effect = s_effect;
global.mine = s_mine;
global.receptor = s_receptor;
global.noteoverride = 0;
global.gimmickactive = true;
global.xmod = 8;
global.hidden = false;

global.difficulty = 1;

if file_exists("profile.ini") {
    //game_load("profile.dat");
    ini_open("profile.ini");
    global.scoring[0] = ini_read_string("scores"+string(global.difficulty), "stage 0", "00.00L");
    global.scoring[1] = ini_read_string("scores"+string(global.difficulty), "stage 1", "00.00L");
    global.scoring[2] = ini_read_string("scores"+string(global.difficulty), "stage 2", "00.00L");
    global.scoring[3] = ini_read_string("scores"+string(global.difficulty), "stage 3", "00.00L");
    global.scoring[4] = ini_read_string("scores"+string(global.difficulty), "stage 4", "00.00L");
    global.scoring[5] = ini_read_string("scores"+string(global.difficulty), "stage 5", "00.00L");
    global.scoring[6] = ini_read_string("scores"+string(global.difficulty), "stage 6", "00.00L");
    ini_close();
} else {
    o_controls.x = room_height/2;
    o_controls.going = true;
}
global.kaguya = false;
global.notecover = s_kaguya;
global.streamstring = false;
audio_play_sound(m_night, 0, false);

image_speed = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if room = stagemenu {
    truecombo = 3;
    if o_controls.going = true {
        c_input();
        if alt &amp;&amp; select {
            if window_get_fullscreen() {
                window_set_fullscreen(false);
                window_set_position(global.ogx, global.ogy);
            } else {
                window_set_fullscreen(true);
            }
            select = false;
        }
    }
    global.megastream = false;
    
    if selectoronsong {
        if selectorposy = selectorsavey &amp;&amp; menuposition = 0 {
            selectorposy = 127;
            selectorsavey = 127;
        }
        if up &amp;&amp; menuposition &gt; 0 {
            
            selectorvspd = -87;
            selectorsavevspd = -87;
            selectorsavey -= 87;
            menuposition--;
            if menuposition = 1 {
                selectorposy++;
                selectorsavey++;
            }
        }
        if down &amp;&amp; menuposition &lt; 6 {
            
            selectorvspd = 87;
            selectorsavevspd = 87;
            selectorsavey += 87;
            menuposition++;
            if menuposition = 0 {
                selectorposy--;
                selectorsavey--;
            }
        }
        
    if menuposition &gt;= 1 {
           /* if selectorposy &lt; menuposition*87+128 {
                selectorposy += 3;
            } else if selectorposy &gt; menuposition*87+128 {
                selectorposy -= 3;
            }*/
            if menuxscale &gt; 1 {
                menuxscale -= .05;
            }
            if menuyscale &gt; 1 {
                menuyscale -= .15;
            }
        } else {
            /*if selectorposy &lt; menuposition*87+129 {
                selectorposy += 3;
            } else if selectorposy &gt; menuposition*87+129 {
                selectorposy -= 3;
            }*/
            if menuxscale &lt; 2 {
                menuxscale += .05;
            }
            if menuyscale &lt; 1.2 {
                menuyscale += .15;
            }
        }
        
        var i;
        for (i=0; i&lt;6; i++) {
            scoreshowcolour[i] = c_white;
            switch string_copy(global.scoring[i], 6, 1) {
                case "M":
                    scoreshowcolour[i] = c_teal;
                    break;
                case "P":
                    scoreshowcolour[i] = c_yellow;
                    break;
                case "G":
                    scoreshowcolour[i] = c_green;
                    break;
                case "L":
                    scoreshowcolour[i] = c_red;
                    break;
                case "":
                    scoreshowcolour[i] = c_white;
                    break;
            }
            scoreshow[i] = string_copy(global.scoring[i], 1, 5);
            
        }
        
        
        
        
        if select &amp;&amp; !instance_exists(o_fao) {
            switch menuposition {
                case 0:
                    global.songscript = c_combattheme;
                    global.storymode = true;
                    break;
                case 1:
                    global.songscript = c_combattheme;
                    break;
                case 2:
                    global.songscript = c_lancerraps;
                    break;
                case 3:
                    global.songscript = c_everythingwillfreeze;
                    break;
                case 4:
                    global.songscript = c_reset_set;
                    break;
                case 5:
                    global.songscript = c_eonbreak;
                    break;
                case 6:
                    global.songscript = c_eveniftheworlddeceivesyou;
                    break;
            }
            audio_play_sound(se_select, 0, false);
            if menuposition &gt; 0 {
                global.currentstage = menuposition;
            } else {
                global.currentstage = 1;
            }
            audio_stop_sound(m_night);
            if menuposition != 0 {
                instance_create(0, 0, o_fao);
            } else {
                with instance_create(0, 0, o_fao) {
                    leaving = cutscene;
                }
            }
        }
    } else {
        if lockon = 0 {
            if select {
                lockon = menuposition+1;
            }
            if up &amp;&amp; menuposition &gt; 0 {
                menuposition--;
                selectorvspd = -174;
                selectorsavevspd = -174;
                selectorsavey -= 174;
            }
            if down &amp;&amp; menuposition &lt; 2 {
                menuposition++;
                selectorvspd = 174;
                selectorsavevspd = 174;
                selectorsavey += 174;
            }
        } else if lockon = 1 {
            if left &amp;&amp; global.noteoverride &gt; 0
                global.noteoverride--;
            if right &amp;&amp; global.noteoverride &lt; 5
                global.noteoverride++;
            if back || select
                lockon = 0;
        } else if lockon = 2 {
            global.gimmickactive = !global.gimmickactive;
            lockon = 0;
        } else if lockon = 3 {
            if left &amp;&amp; global.xmod &gt; .5
                global.xmod -= .5;
            if right &amp;&amp; global.xmod &lt; 20
                global.xmod += .5;
            if back || select
                lockon = 0;
        }
        if selectorposy &lt; menuposition*174+215 {
            selectorposy += 6;
        } else if selectorposy &gt; menuposition*174+215 {
            selectorposy -= 6;
        }
        switch menuposition {
            case 0:
                if menuxscale &gt; 1.2 {
                    menuxscale -= .05;
                }
                if menuxscale &lt; 1.2 {
                    menuxscale += .05;
                }
                break;
            case 1:
                if menuxscale &gt; 1.15 {
                    menuxscale -= .05;
                }
                if menuxscale &lt; 1.15 {
                    menuxscale += .05;
                }
                break;
            case 2:
                if menuxscale &gt; 0.75 {
                    menuxscale -= .05;
                }
                if menuxscale &lt; 0.75 {
                    menuxscale += .05;
                }
                break;
        }
        if menuyscale &gt; 1 {
            menuyscale -= .05;
        }
    }
    if (left || right) &amp;&amp; lockon = 0 {
        selectoronsong = !selectoronsong;
        if !selectoronsong {
            menuposition = floor(menuposition/2.5);
            selectorposx = 1037;
            selectorposy = 215+menuposition*174;
            selectorsavey = 215+menuposition*174;
            selectorvspd = 0;
            menuxscale = 1;
            menuyscale = 1;
        } else {
            menuposition = ceil(menuposition*2.5);
            selectorposx = 652;
            selectorposy = 127+menuposition*87+ceil(menuposition/10);
            selectorsavey = 127+menuposition*87+ceil(menuposition/10);
            selectorvspd = 0;
            menuxscale = 1;
            menuyscale = 1;
        }
    }
    selectorposy = selectorsavey;
    selectorvspd = selectorvspd/2;
    selectorposy -= selectorvspd;
    
    if swap {
        global.difficulty = abs(global.difficulty-1);
        if file_exists("profile.ini") {
            //game_load("profile.dat");
            ini_open("profile.ini");
            global.scoring[0] = ini_read_string("scores"+string(global.difficulty), "stage 0", "00.00L");
            global.scoring[1] = ini_read_string("scores"+string(global.difficulty), "stage 1", "00.00L");
            global.scoring[2] = ini_read_string("scores"+string(global.difficulty), "stage 2", "00.00L");
            global.scoring[3] = ini_read_string("scores"+string(global.difficulty), "stage 3", "00.00L");
            global.scoring[4] = ini_read_string("scores"+string(global.difficulty), "stage 4", "00.00L");
            global.scoring[5] = ini_read_string("scores"+string(global.difficulty), "stage 5", "00.00L");
            global.scoring[6] = ini_read_string("scores"+string(global.difficulty), "stage 6", "00.00L");
            ini_close();
        }
        difcursavedy = 49+abs(global.difficulty-1)*76;
        difcurvspd = difcursavedy-difcursy;
        
        
    }
    
    difcursy = difcursavedy;
    difcurvspd = difcurvspd/2;
    difcursy -= difcurvspd;
    
}

if keyboard_check_pressed(ord('H')) {
    global.hidden = !global.hidden;
}

if room = rhythm_limbo {
    if MELODYCHASER.comborank &lt;= truecombo {
        truecombo = MELODYCHASER.comborank;
    }
}


/*if left {
    switch global.red {
    }
}*/

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if room = stagemenu {
    draw_self();
    draw_set_colour(c_white);
    //draw_text(100, 100, string(menuposition));
    draw_set_halign(fa_left);
    if selectoronsong {
        switch menuposition {
            case 0:
                draw_text(652, menuposition*87+162, "");
                break;
            case 1:
                draw_text(652, menuposition*87+162, "Combat Theme");
                break;
            case 2:
                draw_text(652, menuposition*87+162, "Lancer Raps");
                break;
            case 3:
                draw_text(652, menuposition*87+162, "Everything Will Freeze");
                break;
            case 4:
                draw_text(652, menuposition*87+162, "Reset Set");
                break;
            case 5:
                draw_text(652, menuposition*87+162, "Eon Break");
                break;
            case 6:
                draw_text(652, menuposition*87+162, "super test");
                break;
        }
    }
    
    draw_set_halign(fa_center);
    draw_set_font(f_scoreronaldo);
    draw_sprite_ext(s_scorecloud, 0, 1000, 160, 1.5, 1.2, 0, scoreshowcolour[0], 1);
    draw_sprite_ext(s_scorecloud, 0, 800, 87+160, 1, 1, 0, scoreshowcolour[1], 1);
    draw_sprite_ext(s_scorecloud, 0, 800, 174+160, 1, 1, 0, scoreshowcolour[2], 1);
    draw_sprite_ext(s_scorecloud, 0, 800, 261+160, 1, 1, 0, scoreshowcolour[3], 1);
    draw_sprite_ext(s_scorecloud, 0, 800, 348+160, 1, 1, 0, scoreshowcolour[4], 1);
    draw_sprite_ext(s_scorecloud, 0, 800, 435+160, 1, 1, 0, scoreshowcolour[5], 1);
    
    draw_text(1088, 140, scoreshow[0]);
    draw_text(858, 87+145, scoreshow[1]);
    draw_text(858, 174+145, scoreshow[2]);
    draw_text(858, 261+145, scoreshow[3]);
    draw_text(858, 348+145, scoreshow[4]);
    draw_text(858, 435+145, scoreshow[5]);
    
    draw_sprite_ext(global.receptor, 0, 221+64-24, 250, 1, 1, -90, c_white, 1);
    draw_sprite_ext(global.receptor, 0, 221+128-24, 250, 1, 1, 0, c_white, 1);
    draw_sprite_ext(global.receptor, 0, 221+192-24, 250, 1, 1, 180, c_white, 1);
    draw_sprite_ext(global.receptor, 0, 221+256-24, 250, 1, 1, 90, c_white, 1);
    var noteskinshow = s_kaguya;
    switch global.noteoverride {
        case 0:
            noteskinshow = s_null;
            global.receptor = s_receptor;
            break;
        case 1:
            noteskinshow = s_red;
            global.receptor = s_receptor;
            break;
        case 2:
            noteskinshow = s_aka;
            global.receptor = s_reseputaa;
            break;
        case 3:
            noteskinshow = s_dark;
            global.receptor = s_shadow;
            break;
        case 4:
            noteskinshow = s_sun;
            global.receptor = s_galaxy;
            break;
        case 5:
            noteskinshow = s_trueblue;
            global.receptor = s_acceptor;
            break;
    }
    if global.noteoverride != 0 {
        draw_sprite(noteskinshow, 0, 1120, 286);
    } else 
        draw_text(1120, 270, "Default"); //hate how this is possible, still
    draw_set_halign(fa_center);
    if global.gimmickactive = true {
        draw_text(1120, 440, "Active");
    } else {
        draw_text(1120, 440, "Inactive");
    }
    draw_text(1120, 610, string(global.xmod));
    draw_sprite(s_menucover, 0, 207, 591);
    if !lockon {
        draw_sprite_ext(s_cursor, 0, selectorposx, selectorposy, menuxscale, menuyscale, 0, c_white, 1);
    } else {
        draw_sprite_ext(s_cursor, 0, selectorposx, selectorposy, menuxscale, menuyscale, 0, c_blue, 1);
    }
    draw_sprite(s_difficultycursor, 0, 0, difcursy);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
